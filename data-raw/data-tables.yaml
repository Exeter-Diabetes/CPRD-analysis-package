naming:
  consultation: consultation
  drugIssue: drug_issue
  observation: observation
  patient: patient
  practice: practice
  problem: problem
  referral: referral
  staff: staff
  patidsWithLinkage: patids_with_linkage
  chess: chess
  hesAcp: hes_acp
  hesCcare: hes_ccare
  hesDiagnosisEpi: hes_diagnosis_epi
  hesDiagnosisHosp: hes_diagnosis_hosp
  hesEpisodes: hes_episodes
  hesHospital: hes_hospital
  hesPatient: hes_patient
  hesPrimaryDiagHosp: hes_primary_diag_hosp
  hesProceduresEpi: hes_procedures_epi
  onsDeath: ons_death
  patientImd2015: patient_imd2015
  practiceImd: practice_imd
  sgss: sgss
tables:
  consultation:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{consultation}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{consultation}
      (patid BIGINT UNSIGNED,
      consid BIGINT UNSIGNED NOT NULL,
      pracid MEDIUMINT,
      consdate DATE,
      enterdate DATE,
      staffid BIGINT,
      conssourceid BIGINT,
      cprdconstype SMALLINT,
      consmedcodeid BIGINT,
      PRIMARY KEY (consid))
      ENGINE=MYISAM
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{consultation}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, consid, pracid, @orig_consdate, @orig_enterdate, @orig_staffid, @orig_conssourceid, @orig_cprdconstype, @orig_consmedcodeid)
      SET consdate = STR_TO_DATE(NULLIF(@orig_consdate,''),'%d/%m/%Y'),
      enterdate = STR_TO_DATE(@orig_enterdate,'%d/%m/%Y'),
      staffid = NULLIF(@orig_staffid,''),
      conssourceid = NULLIF(@orig_conssourceid,''),
      cprdconstype = NULLIF(@orig_cprdconstype,''),
      consmedcodeid = NULLIF(@orig_consmedcodeid,'')
  drugIssue:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{drugIssue}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{drugIssue}
      (patid BIGINT UNSIGNED,
      issueid BIGINT UNSIGNED,
      pracid MEDIUMINT,
      probobsid BIGINT UNSIGNED,
      drugrecid BIGINT UNSIGNED,
      issuedate DATE,
      enterdate DATE,
      staffid BIGINT,
      prodcodeid BIGINT,
      dosageid CHAR(64),
      quantity DECIMAL(9,3),
      quantunitid TINYINT,
      duration BIGINT,
      estnhscost DECIMAL(10,4),
      PRIMARY KEY (issueid))
      ENGINE=MYISAM
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{drugIssue}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, issueid, pracid, @orig_probobsid, @orig_drugrecid, @orig_issuedate, @orig_enterdate, @orig_staffid, prodcodeid, dosageid, quantity, @orig_quantunitid, duration, estnhscost)
      SET probobsid = NULLIF(@orig_probobsid,''),
      drugrecid = NULLIF(@orig_drugrecid,''),
      issuedate = STR_TO_DATE(@orig_issuedate,'%d/%m/%Y'),
      enterdate = STR_TO_DATE(@orig_enterdate,'%d/%m/%Y'),
      staffid = NULLIF(@orig_staffid,''),
      quantunitid = NULLIF(@orig_quantunitid,'')
  observation:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{observation}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{observation}
      (patid BIGINT UNSIGNED,
      consid BIGINT UNSIGNED,
      pracid MEDIUMINT,
      obsid BIGINT UNSIGNED NOT NULL,
      obsdate DATE,
      enterdate DATE,
      staffid BIGINT,
      parentsobsid BIGINT UNSIGNED,
      medcodeid BIGINT,
      testvalue DECIMAL(19,3),
      numunitid BIGINT,
      obstypeid MEDIUMINT,
      numrangelow DECIMAL(19,3),
      numrangehigh DECIMAL(19,3),
      probobsid BIGINT UNSIGNED,
      PRIMARY KEY (obsid))
      ENGINE=MYISAM
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{observation}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, @orig_consid, pracid, obsid, @orig_obsdate, @orig_enterdate, @orig_staffid, @orig_parentsobsid, @orig_medcodeid, @orig_testvalue, @orig_numunitid, obstypeid, @orig_numrangelow, @orig_numrangehigh, @orig_probobsid)
      SET consid = NULLIF(@orig_consid,''),
      obsdate = STR_TO_DATE(NULLIF(@orig_obsdate,''),'%d/%m/%Y'),
      enterdate = STR_TO_DATE(@orig_enterdate,'%d/%m/%Y'),
      staffid = NULLIF(@orig_staffid,''),
      parentsobsid = NULLIF(@orig_parentsobsid,''),
      medcodeid = NULLIF(@orig_medcodeid,''),
      testvalue = NULLIF(@orig_testvalue,''),
      numunitid = NULLIF(@orig_numunitid,''),
      numrangelow = NULLIF(@orig_numrangelow,''),
      numrangehigh = NULLIF(@orig_numrangehigh,''),
      probobsid = NULLIF(@orig_probobsid,'')
  patient:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{patient}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{patient}
      (patid BIGINT UNSIGNED,
      pracid MEDIUMINT,
      usualgpstaffid BIGINT,
      gender SMALLINT,
      yob SMALLINT,
      mob TINYINT,
      emis_ddate DATE,
      regstartdate DATE,
      patienttypeid MEDIUMINT,
      regenddate DATE,
      acceptable BOOL,
      cprd_ddate DATE,
      PRIMARY KEY (patid))
      ENGINE=MYISAM
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{patient}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, pracid, @orig_usualgpstaffid, gender, yob, @orig_mob, @orig_emis_ddate, @orig_regstartdate, patienttypeid, @orig_regenddate, acceptable, @orig_cprd_ddate)
      SET usualgpstaffid = NULLIF(@orig_usualgpstaffid,''),
      mob = NULLIF(@orig_mob,''),
      emis_ddate = STR_TO_DATE(NULLIF(@orig_emis_ddate,''),'%d/%m/%Y'),
      regstartdate = STR_TO_DATE(@orig_regstartdate,'%d/%m/%Y'),
      regenddate = STR_TO_DATE(NULLIF(@orig_regenddate,''),'%d/%m/%Y'),
      cprd_ddate = STR_TO_DATE(NULLIF(@orig_cprd_ddate,''),'%d/%m/%Y')
  practice:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{practice}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{practice}
      (pracid MEDIUMINT,
      lcd DATE,
      uts DATE,
      region MEDIUMINT,
      PRIMARY KEY (pracid))
      ENGINE=MYISAM
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{practice}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (pracid, @orig_lcd, @orig_uts, @orig_region)
      SET lcd = STR_TO_DATE(@orig_lcd,'%d/%m/%Y'),
      uts = STR_TO_DATE(NULLIF(@orig_uts,''),'%d/%m/%Y'),
      region = NULLIF(@orig_region,'')
  problem:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{problem}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{problem}
      (patid BIGINT UNSIGNED,
      obsid BIGINT UNSIGNED NOT NULL,
      pracid MEDIUMINT,
      parentprobobsid BIGINT UNSIGNED,
      probenddate DATE,
      expduration MEDIUMINT,
      lastrevdate DATE,
      lastrevstaffid VARCHAR(10),
      parentprobrelid MEDIUMINT,
      probstatusid MEDIUMINT,
      signid MEDIUMINT
      ) ENGINE=MYISAM
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{problem}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, obsid, pracid, @orig_parentprobobsid, @orig_probenddate, @orig_expduration, @orig_lastrevdate, @orig_lastrevstaffid, @orig_parentprobrelid, @orig_probstatusid, @orig_signid)
      SET parentprobobsid = NULLIF(@orig_parentprobobsid,''),
      probenddate = STR_TO_DATE(NULLIF(@orig_probenddate,''),'%d/%m/%Y'),
      expduration = NULLIF(@orig_expduration,''),
      lastrevdate = STR_TO_DATE(NULLIF(@orig_lastrevdate,''),'%d/%m/%Y'),
      lastrevstaffid = NULLIF(@orig_lastrevstaffid,''),
      parentprobrelid = NULLIF(@orig_parentprobrelid,''),
      probstatusid = NULLIF(@orig_probstatusid,''),
      signid = NULLIF(@orig_signid,'')
  referral:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{referral}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{referral}
      (patid BIGINT UNSIGNED,
      obsid BIGINT UNSIGNED NOT NULL,
      pracid MEDIUMINT,
      refsourceorgid BIGINT,
      reftargetorgid BIGINT,
      refurgencyid TINYINT,
      refservicetypeid TINYINT,
      refmodeid TINYINT,
      PRIMARY KEY (obsid))
      ENGINE=MYISAM
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{referral}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, obsid, pracid, @orig_refsourceorgid, @orig_reftargetorgid, @orig_refurgencyid, @orig_refservicetypeid, @orig_refmodeid)
      SET refsourceorgid = NULLIF(@orig_refsourceorgid,''),
      reftargetorgid = NULLIF(@orig_reftargetorgid,''),
      refurgencyid = NULLIF(@orig_refurgencyid,''),
      refservicetypeid = NULLIF(@orig_refservicetypeid,''),
      refmodeid = NULLIF(@orig_refmodeid,'')
  staff:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{staff}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{staff}
      (staffid BIGINT NOT NULL,
      pracid MEDIUMINT,
      jobid MEDIUMINT,
      PRIMARY KEY (staffid))
      ENGINE=MYISAM
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{staff}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (staffid, pracid, @orig_jobcatid)
      SET jobcatid = NULLIF(@orig_jobcatid,'')
  patidsWithLinkage:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{patidsWithLinkage}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{patidsWithLinkage}
      (patid BIGINT UNSIGNED NOT NULL)
      ENGINE=MYISAM
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{patidsWithLinkage}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, @pracid, @linkdate, @hes_e, @death_e, @cr_e, @lsoa_e, @mh_e)
  chess:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{chess}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{chess}
      (patid BIGINT UNSIGNED,
      pracid MEDIUMINT,
      caseid MEDIUMINT,
      n_chess_patid SMALLINT,
      trustid SMALLINT,
      dateupdated DATE,
      weekno TINYINT,
      weekofadmission SMALLINT,
      yearofadmission SMALLINT,
      ageyear SMALLINT,
      estimateddateonset DATE,
      notknownonset VARCHAR(3),
      infectionswabdate DATE,
      labtestdate DATE,
      typeofspecimen VARCHAR(29),
      otherspecimentype VARCHAR(32),
      covid19 VARCHAR(3),
      influenzaah1n1pdm2009 VARCHAR(3),
      influenzaah3n2 VARCHAR(3),
      influenzab VARCHAR(3),
      influenzaanonsubtyped VARCHAR(3),
      influenzaaunsubtypable VARCHAR(3),
      rsv VARCHAR(3),
      otherresult VARCHAR(3),
      admittedfrom VARCHAR(20),
      dateadmittedicu DATE,
      dateleavingicu DATE,
      sbother VARCHAR(128),
      sbdate DATE,
      ventilatedwhilstadmitted VARCHAR(3),
      admissionflu VARCHAR(7),
      admissioncovid19 VARCHAR(7),
      isviralpneumoniacomplication VARCHAR(3),
      isardscomplication VARCHAR(3),
      isunknowncomplication VARCHAR(3),
      isothercoinfectionscomplication VARCHAR(3),
      isothercomplication VARCHAR(3),
      issecondarybacterialpneumoniacom VARCHAR(3),
      ventilatedwhilstadmitteddays SMALLINT,
      patientecmo VARCHAR(3),
      wasthepatientadmittedtoicu VARCHAR(7),
      organismname VARCHAR(44),
      daysecmo SMALLINT,
      hospitaladmissiondate DATE,
      admissionrsv VARCHAR(7),
      respiratorysupportnone VARCHAR(3),
      oxygenviacannulaeormask VARCHAR(3),
      highflownasaloxygen VARCHAR(3),
      noninvasivemechanicalventilation VARCHAR(3),
      invasivemechanicalventilation VARCHAR(3),
      respiratorysupportecmo VARCHAR(3),
      anticovid19treatment VARCHAR(7),
      chronicrespiratory VARCHAR(7),
      asthmarequiring VARCHAR(7),
      chronicheart VARCHAR(7),
      chronicrenal VARCHAR(7),
      chronicliver VARCHAR(7),
      chronicneurological VARCHAR(7),
      isdiabetes VARCHAR(7),
      diabetestype VARCHAR(8),
      immunosuppressiontreatment VARCHAR(7),
      immunosuppressiondisease VARCHAR(7),
      other VARCHAR(7),
      obesityclinical VARCHAR(10),
      obesitybmi VARCHAR(9),
      pregnancy VARCHAR(7),
      gestationweek SMALLINT,
      prematurity VARCHAR(7),
      hypertension VARCHAR(7),
      travelin14days VARCHAR(7),
      worksashealthcareworker VARCHAR(7),
      contactwithconfirmedcovid19case VARCHAR(7),
      finaloutcome VARCHAR(15),
      finaloutcomedate DATE,
      transferdestination VARCHAR(20),
      causeofdeath VARCHAR(25),
      hospitaladmissionadmittedfrom VARCHAR(20),
      mechanicalinvasiveventilationdur VARCHAR(50),
      asymptomatictesting VARCHAR(3),
      patientstillonicu VARCHAR(7),
      respiratorysupportunknown VARCHAR(3),
      seriousmentalillness VARCHAR(7),
      priorhospitalattendance VARCHAR(7),
      dateofpriorattendance DATE,
      admissionnotrelatedtorespiratory VARCHAR(7),
      typeorplaceofwork VARCHAR(29),
      treatmenttocilizumab VARCHAR(7),
      treatmentremdesivir VARCHAR(7),
      treatmentother VARCHAR(7),
      treatmentconvalescentplasma VARCHAR(7),
      primary_key SMALLINT PRIMARY KEY AUTO_INCREMENT)
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{chess}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, pracid, caseid, n_chess_patid, trustid, @dateupdated, weekno, @weekofadmission, @yearofadmission, @ageyear, @estimateddateonset, @notknownonset, @infectionswabdate, @labtestdate, typeofspecimen, @otherspecimentype, @covid19, @influenzaah1n1pdm2009, @influenzaah3n2, @influenzab, @influenzaanonsubtyped, @influenzaaunsubtypable, @rsv, @otherresult, @admittedfrom, @dateadmittedicu, @dateleavingicu, @sbother, @sbdate, @ventilatedwhilstadmitted, @admissionflu, @admissioncovid19, @isviralpneumoniacomplication, @isardscomplication, @isunknowncomplication, @isothercoinfectionscomplication, @isothercomplication, @issecondarybacterialpneumoniacom, @ventilatedwhilstadmitteddays, @patientecmo, @wasthepatientadmittedtoicu, @organismname, @daysecmo, @hospitaladmissiondate, @admissionrsv, @respiratorysupportnone, @oxygenviacannulaeormask, @highflownasaloxygen, @noninvasivemechanicalventilation, @invasivemechanicalventilation, @respiratorysupportecmo, @anticovid19treatment, @chronicrespiratory,
      @asthmarequiring, @chronicheart, @chronicrenal, @chronicliver, @chronicneurological, @isdiabetes, @diabetestype, @immunosuppressiontreatment, @immunosuppressiondisease, @other, @obesityclinical, @obesitybmi, @pregnancy, @gestationweek, @prematurity, @hypertension, @travelin14days, @worksashealthcareworker, @contactwithconfirmedcovid19case, @finaloutcome, @finaloutcomedate, @transferdestination, @causeofdeath, @hospitaladmissionadmittedfrom, @mechanicalinvasiveventilationdur, @asymptomatictesting, @patientstillonicu, @respiratorysupportunknown, @seriousmentalillness, @priorhospitalattendance, @dateofpriorattendance, @admissionnotrelatedtorespiratory, @typeorplaceofwork, @treatmenttocilizumab, @treatmentremdesivir, @treatmentother, @treatmentconvalescentplasma)
      SET dateupdated = STR_TO_DATE(NULLIF(@dateupdated,''),'%d/%m/%Y'),
      weekofadmission = NULLIF(@weekofadmission,''),
      yearofadmission = NULLIF(@yearofadmission,''),
      ageyear = IF(@ageyear='' OR @ageyear='-11',NULL,@ageyear),
      estimateddateonset = STR_TO_DATE(NULLIF(@estimateddateonset,''),'%d/%m/%Y'),
      notknownonset = NULLIF(@notknownonset,''),
      infectionswabdate = STR_TO_DATE(NULLIF(@infectionswabdate,''),'%d/%m/%Y'),
      labtestdate = IF(@labtestdate='' OR @labtestdate='01/01/2001',NULL,STR_TO_DATE(@labtestdate,'%d/%m/%Y')),
      otherspecimentype = NULLIF(@otherspecimentype,''),
      covid19 = NULLIF(@covid19,''),
      influenzaah1n1pdm2009 = NULLIF(@influenzaah1n1pdm2009,''),
      influenzaah3n2 = NULLIF(@influenzaah3n2,''),
      influenzab = NULLIF(@influenzab,''),
      influenzaanonsubtyped = NULLIF(@influenzaanonsubtyped,''),
      influenzaaunsubtypable = NULLIF(@influenzaaunsubtypable,''),
      rsv = NULLIF(@rsv,''),
      otherresult = NULLIF(@otherresult,''),
      admittedfrom = NULLIF(@admittedfrom,''),
      dateadmittedicu = STR_TO_DATE(NULLIF(@dateadmittedicu,''),'%d/%m/%Y'),
      dateleavingicu = STR_TO_DATE(NULLIF(@dateleavingicu,''),'%d/%m/%Y'),
      sbother = NULLIF(@sbother,''),
      sbdate = STR_TO_DATE(NULLIF(@sbdate,''),'%d/%m/%Y'),
      ventilatedwhilstadmitted = NULLIF(@ventilatedwhilstadmitted,''),
      admissionflu = NULLIF(@admissionflu,''),
      admissioncovid19 = NULLIF(@admissioncovid19,''),
      isviralpneumoniacomplication = NULLIF(@isviralpneumoniacomplication,''),
      isardscomplication = NULLIF(@isardscomplication,''),
      isunknowncomplication = NULLIF(@isunknowncomplication,''),
      isothercoinfectionscomplication = NULLIF(@isothercoinfectionscomplication,''),
      isothercomplication = NULLIF(@isothercomplication,''),
      issecondarybacterialpneumoniacom = NULLIF(@issecondarybacterialpneumoniacom,''),
      ventilatedwhilstadmitteddays = NULLIF(@ventilatedwhilstadmitteddays,''),
      patientecmo = NULLIF(@patientecmo,''),
      wasthepatientadmittedtoicu = NULLIF(@wasthepatientadmittedtoicu,''),
      organismname = NULLIF(@organismname,''),
      daysecmo = NULLIF(@daysecmo,''),
      hospitaladmissiondate = STR_TO_DATE(NULLIF(@hospitaladmissiondate,''),'%d/%m/%Y'),
      admissionrsv = NULLIF(@admissionrsv,''),
      respiratorysupportnone = NULLIF(@respiratorysupportnone,''),
      oxygenviacannulaeormask = NULLIF(@oxygenviacannulaeormask,''),
      highflownasaloxygen = NULLIF(@highflownasaloxygen,''),
      noninvasivemechanicalventilation = NULLIF(@noninvasivemechanicalventilation,''),
      invasivemechanicalventilation = NULLIF(@invasivemechanicalventilation,''),
      respiratorysupportecmo = NULLIF(@respiratorysupportecmo,''),
      anticovid19treatment = NULLIF(@anticovid19treatment,''),
      chronicrespiratory = NULLIF(@chronicrespiratory,''),
      asthmarequiring = NULLIF(@asthmarequiring,''),
      chronicheart = NULLIF(@chronicheart,''),
      chronicrenal = NULLIF(@chronicrenal,''),
      chronicliver = NULLIF(@chronicliver,''),
      chronicneurological = NULLIF(@chronicneurological,''),
      isdiabetes = NULLIF(@isdiabetes,''),
      diabetestype = NULLIF(@diabetestype,''),
      immunosuppressiontreatment = NULLIF(@immunosuppressiontreatment,''),
      immunosuppressiondisease = NULLIF(@immunosuppressiondisease,''),
      other = NULLIF(@other,''),
      obesityclinical = NULLIF(@obesityclinical,''),
      obesitybmi = NULLIF(@obesitybmi,''),
      pregnancy = NULLIF(@pregnancy,''),
      gestationweek = NULLIF(@gestationweek,''),
      prematurity = NULLIF(@prematurity,''),
      hypertension = NULLIF(@hypertension,''),
      travelin14days = NULLIF(@travelin14days,''),
      worksashealthcareworker = NULLIF(@worksashealthcareworker,''),
      contactwithconfirmedcovid19case = NULLIF(@contactwithconfirmedcovid19case,''),
      finaloutcome = NULLIF(@finaloutcome,''),
      finaloutcomedate = STR_TO_DATE(NULLIF(@finaloutcomedate,''),'%d/%m/%Y'),
      transferdestination = NULLIF(@transferdestination,''),
      causeofdeath = NULLIF(@causeofdeath,''),
      hospitaladmissionadmittedfrom = NULLIF(@hospitaladmissionadmittedfrom,''),
      mechanicalinvasiveventilationdur = NULLIF(@mechanicalinvasiveventilationdur,''),
      asymptomatictesting = NULLIF(@asymptomatictesting,''),
      patientstillonicu = NULLIF(@patientstillonicu,''),
      respiratorysupportunknown = NULLIF(@respiratorysupportunknown,''),
      seriousmentalillness = NULLIF(@seriousmentalillness,''),
      priorhospitalattendance = NULLIF(@priorhospitalattendance,''),
      dateofpriorattendance = STR_TO_DATE(NULLIF(@dateofpriorattendance,''),'%d/%m/%Y'),
      admissionnotrelatedtorespiratory = NULLIF(@admissionnotrelatedtorespiratory,''),
      typeorplaceofwork = NULLIF(@typeorplaceofwork,''),
      treatmenttocilizumab = NULLIF(@treatmenttocilizumab,''),
      treatmentremdesivir = NULLIF(@treatmentremdesivir,''),
      treatmentother = NULLIF(@treatmentother,''),
      treatmentconvalescentplasma = NULLIF(@treatmentconvalescentplasma,'')
  hesPatient:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{hesPatient}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{hesPatient}
      (patid BIGINT UNSIGNED NOT NULL,
      pracid MEDIUMINT,
      gen_hesid BIGINT UNSIGNED,
      n_patid_hes SMALLINT,
      gen_ethnicity TINYINT,
      match_rank TINYINT)
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{hesPatient}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, pracid, gen_hesid, n_patid_hes, @gen_ethnicity, match_rank)
      SET gen_ethnicity = IF(@gen_ethnicity = 'White', 1,
      IF(@gen_ethnicity = 'Bl_Carib', 2,
      IF(@gen_ethnicity = 'Bl_Afric', 3,
      IF(@gen_ethnicity = 'Bl_Other', 4,
      IF(@gen_ethnicity = 'Indian', 5,
      IF(@gen_ethnicity = 'Pakistani', 6,
      IF(@gen_ethnicity = 'Bangladesi', 7,
      IF(@gen_ethnicity = 'Oth_Asian', 8,
      IF(@gen_ethnicity = 'Chinese', 9,
      IF(@gen_ethnicity = 'Mixed', 10,
      IF(@gen_ethnicity = 'Other', 11,
      IF(@gen_ethnicity = 'Unknown', NULL, NULL))))))))))))
  hesHospital:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{hesHospital}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{hesHospital}
      (patid BIGINT UNSIGNED NOT NULL,
      spno BIGINT UNSIGNED NOT NULL,
      admidate DATE,
      discharged DATE,
      admimeth CHAR(2),
      admisorc TINYINT,
      disdest TINYINT,
      dismeth TINYINT,
      duration MEDIUMINT,
      elecdate DATE,
      elecdur SMALLINT,
      PRIMARY KEY (patid, spno))
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{hesHospital}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, spno, @admidate, @discharged, admimeth, admisorc, disdest, dismeth, @duration, @elecdate, @elecdur)
      SET admidate = STR_TO_DATE(NULLIF(@admidate,''),'%d/%m/%Y'),
      discharged = STR_TO_DATE(NULLIF(@discharged,''),'%d/%m/%Y'),
      duration = NULLIF(@duration,''),
      elecdate = STR_TO_DATE(NULLIF(@elecdate,''),'%d/%m/%Y'),
      elecdur = NULLIF(@elecdur,'')
  hesEpisodes:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{hesEpisodes}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{hesEpisodes}
      (patid BIGINT UNSIGNED NOT NULL,
      spno BIGINT UNSIGNED,
      epikey BIGINT UNSIGNED NOT NULL,
      admidate DATE,
      epistart DATE,
      epiend DATE,
      discharged DATE,
      eorder SMALLINT,
      epidur MEDIUMINT,
      epitype TINYINT,
      admimeth CHAR(2),
      admisorc TINYINT,
      disdest TINYINT,
      dismeth TINYINT,
      mainspef CHAR(3),
      tretspef CHAR(3),
      pconsult CHAR(16),
      intmanig TINYINT,
      classpat TINYINT,
      firstreg TINYINT,
      ethnos TINYINT,
      PRIMARY KEY (patid, epikey))
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{hesEpisodes}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, spno, epikey, @admidate, @epistart, @epiend, @discharged, eorder, @epidur, epitype, admimeth, admisorc, disdest, dismeth, mainspef, tretspef, @pconsult, intmanig, classpat, @firstreg, @ethnos)
      SET admidate = STR_TO_DATE(NULLIF(@admidate,''),'%d/%m/%Y'),
      epistart = STR_TO_DATE(NULLIF(@epistart,''),'%d/%m/%Y'),
      epiend = STR_TO_DATE(NULLIF(@epiend,''),'%d/%m/%Y'),
      discharged = STR_TO_DATE(NULLIF(@discharged,''),'%d/%m/%Y'),
      epidur = NULLIF(@epidur,''),
      pconsult = IF(@pconsult='&' OR @pconsult='99',NULL,@pconsult),
      firstreg = IF(@firstreg='N',1,IF(@firstreg='',NULL,@firstreg)),
      ethnos = IF(@ethnos = 'White', 1,
      IF(@ethnos = 'Bl_Carib', 2,
      IF(@ethnos = 'Bl_Afric', 3,
      IF(@ethnos = 'Bl_Other', 4,
      IF(@ethnos = 'Indian', 5,
      IF(@ethnos = 'Pakistani', 6,
      IF(@ethnos = 'Bangladesi', 7,
      IF(@ethnos = 'Oth_Asian', 8,
      IF(@ethnos = 'Chinese', 9,
      IF(@ethnos = 'Mixed', 10,
      IF(@ethnos = 'Other', 11,
      IF(@ethnos = 'Unknown', NULL, NULL))))))))))))
  hesDiagnosisEpi:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{hesDiagnosisEpi}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{hesDiagnosisEpi}
      (patid BIGINT UNSIGNED NOT NULL,
      spno BIGINT UNSIGNED,
      epikey BIGINT UNSIGNED NOT NULL,
      epistart DATE,
      epiend DATE,
      ICD CHAR(5),
      ICDx CHAR(2),
      d_order TINYINT NOT NULL,
      PRIMARY KEY (patid, epikey, d_order))
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{hesDiagnosisEpi}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, spno, epikey, @epistart, @epiend, ICD, @ICDx, d_order)
      SET epistart = STR_TO_DATE(NULLIF(@epistart,''),'%d/%m/%Y'),
      epiend = STR_TO_DATE(NULLIF(@epiend,''),'%d/%m/%Y'),
      ICDx = NULLIF(@ICDx,'')
  hesDiagnosisHosp:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{hesDiagnosisHosp}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{hesDiagnosisHosp}
      (patid BIGINT UNSIGNED,
      spno BIGINT UNSIGNED,
      admidate DATE,
      discharged DATE,
      ICD CHAR(5),
      ICDx CHAR(2),
      primary_key INT PRIMARY KEY AUTO_INCREMENT)
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{hesDiagnosisHosp}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, spno, @admidate, @discharged, ICD, @ICDx)
      SET admidate = STR_TO_DATE(NULLIF(@admidate,''),'%d/%m/%Y'),
      discharged = STR_TO_DATE(NULLIF(@discharged,''),'%d/%m/%Y'),
      ICDx = NULLIF(@ICDx,'')
  hesPrimaryDiagHosp:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{hesPrimaryDiagHosp}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{hesPrimaryDiagHosp}
      (patid BIGINT UNSIGNED,
      spno BIGINT UNSIGNED,
      admidate DATE,
      discharged DATE,
      ICD_PRIMARY CHAR(5),
      ICDx CHAR(2),
      primary_key INT PRIMARY KEY AUTO_INCREMENT)
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{hesPrimaryDiagHosp}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, spno, @admidate, @discharged, ICD_PRIMARY, @ICDx)
      SET admidate = STR_TO_DATE(NULLIF(@admidate,''),'%d/%m/%Y'),
      discharged = STR_TO_DATE(NULLIF(@discharged,''),'%d/%m/%Y'),
      ICDx = NULLIF(@ICDx,'')
  hesProceduresEpi:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{hesProceduresEpi}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{hesProceduresEpi}
      (patid BIGINT UNSIGNED NOT NULL,
      spno BIGINT UNSIGNED,
      epikey BIGINT UNSIGNED NOT NULL,
      admidate DATE,
      epistart DATE,
      epiend DATE,
      discharged DATE,
      OPCS CHAR(4),
      evdate DATE,
      p_order TINYINT NOT NULL,
      PRIMARY KEY (patid, epikey, p_order))
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{hesProceduresEpi}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, spno, epikey, @admidate, @epistart, @epiend, @discharged, @OPCS, @evdate, p_order)
      SET admidate = STR_TO_DATE(NULLIF(@admidate,''),'%d/%m/%Y'),
      epistart = STR_TO_DATE(NULLIF(@epistart,''),'%d/%m/%Y'),
      epiend = STR_TO_DATE(NULLIF(@epiend,''),'%d/%m/%Y'),
      discharged = STR_TO_DATE(NULLIF(@discharged,''),'%d/%m/%Y'),
      OPCS=IF(@OPCS='&',NULL,@OPCS),
      evdate = STR_TO_DATE(NULLIF(@evdate,''),'%d/%m/%Y')
  hesAcp:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{hesAcp}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{hesAcp}
      (patid BIGINT UNSIGNED,
      spno BIGINT UNSIGNED,
      epikey BIGINT UNSIGNED,
      epistart DATE,
      epiend DATE,
      eorder TINYINT,
      epidur SMALLINT,
      numacp TINYINT,
      acpn TINYINT,
      acpstar DATE,
      acpend DATE,
      acpdur SMALLINT,
      intdays SMALLINT,
      depdays SMALLINT,
      acploc TINYINT,
      acpsour TINYINT,
      acpdisp TINYINT,
      acpout TINYINT,
      acpplan TINYINT,
      acpspef CHAR(3),
      orgsup TINYINT,
      primary_key INT PRIMARY KEY AUTO_INCREMENT)
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{hesAcp}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, spno, epikey, @epistart, @epiend, eorder, @epidur, numacp, @acpn, @acpstar, @acpend, @acpdur, @intdays, @depdays, @acploc, @acpsour, @acpdisp, @acpout, @acpplan, @acpspef, @orgsup)
      SET epistart = STR_TO_DATE(@epistart,'%d/%m/%Y'),
      epiend = STR_TO_DATE(NULLIF(@epiend,''),'%d/%m/%Y'),
      epidur = NULLIF(@epidur,''),
      acpn = IF(@acpn='' OR acpn='99',NULL,@acpn),
      acpstar = STR_TO_DATE(NULLIF(@acpstar,''),'%d/%m/%Y'),
      acpend = STR_TO_DATE(NULLIF(@acpend,''),'%d/%m/%Y'),
      acpdur = NULLIF(@acpdur,''),
      intdays = NULLIF(@intdays,''),
      depdays = NULLIF(@depdays,''),
      acploc = NULLIF(@acploc,''),
      acpsour = IF(@acpsour='' OR @acpsour='0',NULL,@acpsour),
      acpdisp = IF(@acpdisp='' OR @acpdisp='0',NULL,@acpdisp),
      acpout = IF(@acpout='' OR @acpout='0',NULL,@acpout),
      acpplan = IF(@acpplan='Y',1,IF(@acpplan='N',2,IF(@acpplan='',NULL,@acpplan))),
      acpspef = IF(@acpspef='' OR @acpspef='0',NULL,@acpspef),
      orgsup = NULLIF(@orgsup,'')
  hesCcare:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{hesCcare}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{hesCcare}
      (patid BIGINT UNSIGNED,
      spno BIGINT UNSIGNED,
      epikey BIGINT UNSIGNED,
      admidate DATE,
      discharged DATE,
      epistart DATE,
      epiend DATE,
      eorder TINYINT,
      ccstartdate DATE,
      ccstarttime TIME,
      ccdisrdydate DATE,
      ccdisrdytime TIME,
      ccdisdate DATE,
      ccdistime TIME,
      ccadmitype TINYINT,
      ccadmisorc TINYINT,
      ccsorcloc TINYINT,
      ccdisstat TINYINT,
      ccdisdest TINYINT,
      ccdisloc TINYINT,
      cclev2days SMALLINT,
      cclev3days SMALLINT,
      bcardsupdays SMALLINT,
      acardsupdays SMALLINT,
      bressupdays SMALLINT,
      aressupdays SMALLINT,
      gisupdays SMALLINT,
      liversupdays SMALLINT,
      neurosupdays SMALLINT,
      rensupdays SMALLINT,
      dermsupdays SMALLINT,
      orgsupmax TINYINT,
      ccunitfun TINYINT,
      unitbedconfig TINYINT,
      bestmatch BOOL DEFAULT NULL,
      ccapcrel TINYINT,
      primary_key INT PRIMARY KEY AUTO_INCREMENT)
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{hesCcare}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, spno, epikey, @admidate, @discharged, @epistart, @epiend, eorder, @ccstartdate, @ccstarttime, @ccdisrdydate, @ccdisrdytime, @ccdisdate, @ccdistime, @ccadmitype, @ccadmisorc, @ccsorcloc, @ccdisstat, @ccdisdest, @ccdisloc, @cclev2days, @cclev3days, @bcardsupdays, @acardsupdays, @bressupdays, @aressupdays, @gisupdays, @liversupdays, @neurosupdays, @rensupdays, @dermsupdays, @orgsupmax, @ccunitfun, @unitbedconfig, @bestmatch, ccapcrel)
      SET admidate = STR_TO_DATE(@admidate,'%d/%m/%Y'),
      discharged = STR_TO_DATE(NULLIF(@discharged,''),'%d/%m/%Y'),
      epistart = STR_TO_DATE(@epistart,'%d/%m/%Y'),
      epiend = STR_TO_DATE(@epiend,'%d/%m/%Y'),
      ccstartdate = STR_TO_DATE(@ccstartdate,'%d/%m/%Y'),
      ccstarttime = NULLIF(@ccstarttime,''),
      ccdisrdydate = STR_TO_DATE(NULLIF(@ccdisrdydate,''),'%d/%m/%Y'),
      ccdisrdytime = NULLIF(@ccdisrdytime,''),
      ccdisdate = STR_TO_DATE(@ccdisdate,'%d/%m/%Y'),
      ccdistime = NULLIF(@ccdistime,''),
      ccadmitype = NULLIF(@ccadmitype,''),
      ccadmisorc = NULLIF(@ccadmisorc,''),
      ccsorcloc = NULLIF(@ccsorcloc,''),
      ccdisstat = NULLIF(@ccdisstat,''),
      ccdisdest = NULLIF(@ccdisdest,''),
      ccdisloc = NULLIF(@ccdisloc,''),
      cclev2days = IF(@cclev2days='' OR @cclev2days='999',NULL,@cclev2days),
      cclev3days = IF(@cclev3days='' OR @cclev3days='999',NULL,@cclev3days),
      bcardsupdays = IF(@bcardsupdays='' OR @bcardsupdays='999',NULL,@bcardsupdays),
      acardsupdays = IF(@acardsupdays='' OR @acardsupdays='999',NULL,@acardsupdays),
      bressupdays = IF(@bressupdays='' OR @bressupdays='999',NULL,@bressupdays),
      aressupdays = IF(@aressupdays='' OR @aressupdays='999',NULL,@aressupdays),
      gisupdays = IF(@gisupdays='' OR @gisupdays='999',NULL,@gisupdays),
      liversupdays = IF(@liversupdays='' OR @liversupdays='999',NULL,@liversupdays),
      neurosupdays = IF(@neurosupdays='' OR @neurosupdays='999',NULL,@neurosupdays),
      rensupdays = IF(@rensupdays='' OR @rensupdays='999',NULL,@rensupdays),
      dermsupdays = IF(@dermsupdays='' OR @dermsupdays='999',NULL,@dermsupdays),
      orgsupmax = NULLIF(@orgsupmax,''),
      ccunitfun = NULLIF(@ccunitfun,''),
      unitbedconfig = NULLIF(@unitbedconfig,''),
      bestmatch = NULLIF(@bestmatch,'')
  patientImd2015:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{patientImd2015}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{patientImd2015}
      (patid BIGINT UNSIGNED NOT NULL,
      pracid MEDIUMINT,
      imd2015_10 TINYINT,
      PRIMARY KEY (patid))
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{patientImd2015}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, pracid, @imd2015_10)
      SET imd2015_10 = NULLIF(@imd2015_10,'')
  practiceImd:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{practiceImd}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{practiceImd}
      (pracid MEDIUMINT NOT NULL,
      country VARCHAR(9),
      e2015_imd_10 TINYINT,
      ni2017_imd_10 TINYINT,
      s2016_imd_10 TINYINT,
      w2014_imd_10 TINYINT,
      PRIMARY KEY (pracid))
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{practiceImd}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (pracid, country, @e2015_imd_10, @ni2017_imd_10, @s2016_imd_10, @w2014_imd_10)
      SET e2015_imd_10 = NULLIF(@e2015_imd_10,''),
      ni2017_imd_10 = NULLIF(@ni2017_imd_10,''),
      s2016_imd_10 = NULLIF(@s2016_imd_10,''),
      w2014_imd_10 = NULLIF(@w2014_imd_10,'')
  onsDeath:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{onsDeath}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{onsDeath}
      (patid BIGINT UNSIGNED NOT NULL,
      pracid MEDIUMINT,
      gen_death_id BIGINT UNSIGNED,
      n_patid_death SMALLINT,
      match_rank TINYINT,
      dor DATE,
      dod DATE,
      dod_partial SMALLINT,
      nhs_indicator TINYINT,
      pod_category VARCHAR(21),
      cause VARCHAR(5),
      cause1 VARCHAR(5),
      cause2 VARCHAR(5),
      cause3 VARCHAR(5),
      cause4 VARCHAR(5),
      cause5 VARCHAR(5),
      cause6 VARCHAR(5),
      cause7 VARCHAR(5),
      cause8 VARCHAR(5),
      cause9 VARCHAR(5),
      cause10 VARCHAR(5),
      cause11 VARCHAR(5),
      cause12 VARCHAR(5),
      cause13 VARCHAR(5),
      cause14 VARCHAR(5),
      cause15 VARCHAR(5),
      PRIMARY KEY (patid))
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{onsDeath}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, pracid, gen_death_id, n_patid_death, match_rank, @dor, @dod, @dod_partial, nhs_indicator, @pod_category, @cause, @cause1, @cause2, @cause3, @cause4, @cause5, @cause6, @cause7, @cause8, @cause9, @cause10, @cause11, @cause12, @cause13, @cause14, @cause15)
      SET dor = STR_TO_DATE(@dor,'%d/%m/%Y'),
      dod = STR_TO_DATE(NULLIF(@dod,''),'%d/%m/%Y'),
      dod_partial = IF(@dod_partial='' OR @dod_partial='--',NULL,SUBSTR(@dod_partial,1,4)),
      pod_category = NULLIF(@pod_category,''),
      cause = NULLIF(@cause,''),
      cause1 = NULLIF(@cause1,''),
      cause2 = NULLIF(@cause2,''),
      cause3 = NULLIF(@cause3,''),
      cause4 = NULLIF(@cause4,''),
      cause5 = NULLIF(@cause5,''),
      cause6 = NULLIF(@cause6,''),
      cause7 = NULLIF(@cause7,''),
      cause8 = NULLIF(@cause8,''),
      cause9 = NULLIF(@cause9,''),
      cause10 = NULLIF(@cause10,''),
      cause11 = NULLIF(@cause11,''),
      cause12 = NULLIF(@cause12,''),
      cause13 = NULLIF(@cause13,''),
      cause14 = NULLIF(@cause14,''),
      cause15 = NULLIF(@cause15,'')
  sgss:
    drop: |
      DROP TABLE IF EXISTS {dataDb}.{sgss}
    create: |
      CREATE TABLE IF NOT EXISTS {dataDb}.{sgss}
      (patid BIGINT UNSIGNED,
      pracid MEDIUMINT,
      n_patid_spec SMALLINT,
      pseudo_specimen_id MEDIUMINT,
      organism_species_name CHAR(33),
      lab_report_date DATE,
      age_in_years SMALLINT,
      reporting_lab_id SMALLINT,
      specimen_date DATE,
      care_home BOOL DEFAULT NULL,
      primary_key SMALLINT PRIMARY KEY AUTO_INCREMENT)
      CHARSET=latin1 COLLATE=latin1_general_ci
    load: |
      LOAD DATA INFILE '{path}' IGNORE
      INTO TABLE {dataDb}.{sgss}
      FIELDS TERMINATED BY '\t'
      LINES TERMINATED BY '\r\n'
      IGNORE 1 LINES
      (patid, pracid, n_patid_spec, pseudo_specimen_id, organism_species_name, @lab_report_date, @age_in_years, reporting_lab_id, @specimen_date, @care_home)
      SET lab_report_date = STR_TO_DATE(@lab_report_date,'%d/%m/%Y'),
      age_in_years = IF(@age_in_years='' OR @age_in_years='-1',NULL,@age_in_years),
      specimen_date = STR_TO_DATE(@specimen_date,'%d/%m/%Y'),
      care_home = IF(@care_home='FALSE',0,IF(@care_home='TRUE',1,IF(@care_home='',NULL,@care_home)))
indexes:
  # patid
  - CREATE INDEX x_{consultation}_patid ON {dataDb}.{consultation} (patid);
  - CREATE INDEX x_{drugIssue}_patid ON {dataDb}.{drugIssue} (patid);
  - CREATE INDEX x_{observation}_patid ON {dataDb}.{observation} (patid);
  - CREATE INDEX x_{problem}_patid ON {dataDb}.{problem} (patid);
  - CREATE INDEX x_{referral}_patid ON {dataDb}.{referral} (patid);
  # obsid / problemid
  - CREATE INDEX x_{referral}_obsid ON {dataDb}.{referral} (obsid);
  - CREATE INDEX x_{observation}_parentobsid ON {dataDb}.{observation} (parentsobsid);
  - CREATE INDEX x_{problem}_parentprobobsid ON {dataDb}.{problem} (parentprobobsid);
  - CREATE INDEX x_{drugIssue}_probobsid ON {dataDb}.{drugIssue} (probobsid);
  - CREATE INDEX x_{observation}_probobsid ON {dataDb}.{observation} (probobsid);
  # pracid
  - CREATE INDEX x_{consultation}_pracid ON {dataDb}.{consultation} (pracid);
  - CREATE INDEX x_{drugIssue}_pracid ON {dataDb}.{drugIssue} (pracid);
  - CREATE INDEX x_{observation}_pracid ON {dataDb}.{observation} (pracid);
  - CREATE INDEX x_{patient}_pracid ON {dataDb}.{patient} (pracid);
  - CREATE INDEX x_{problem}_pracid ON {dataDb}.{problem} (pracid);
  - CREATE INDEX x_{referral}_pracid ON {dataDb}.{referral} (pracid);
  - CREATE INDEX x_{staff}_pracid ON {dataDb}.{staff} (pracid);
  # dates
  - CREATE INDEX x_{consultation}_consdate ON {dataDb}.{consultation} (consdate);
  - CREATE INDEX x_{drugIssue}_issuedate ON {dataDb}.{drugIssue} (issuedate);
  - CREATE INDEX x_{observation}_obsdate ON {dataDb}.{observation} (obsdate);
  - CREATE INDEX x_{patient}_dob ON {dataDb}.{patient} (yob,mob);
  - CREATE INDEX x_{patient}_cprd_ddate ON {dataDb}.{patient} (cprd_ddate);
  - CREATE INDEX x_{patient}_emis_ddate ON {dataDb}.{patient} (emis_ddate);
  - CREATE INDEX x_{patient}_regenddate ON {dataDb}.{patient} (regenddate);
  - CREATE INDEX x_{patient}_regstartdate ON {dataDb}.{patient} (regstartdate);
  - CREATE INDEX x_{problem}_probenddate ON {dataDb}.{problem} (probenddate);
  # - CREATE INDEX x_{staff}_lcd ON {dataDb}.{staff} (lcd);
  # medCodes / prodCodes and associated
  - CREATE INDEX x_{consultation}_consmedcodeid ON {dataDb}.{consultation} (consmedcodeid);
  - CREATE INDEX x_{drugIssue}_prodcodeid ON {dataDb}.{drugIssue} (prodcodeid);
  - CREATE INDEX x_{drugIssue}_dosageid ON {dataDb}.{drugIssue} (dosageid);
  - CREATE INDEX x_{drugIssue}_quantunitid ON {dataDb}.{drugIssue} (quantunitid);
  - CREATE INDEX x_{observation}_medcodeid ON {dataDb}.{observation} (medcodeid);
  - CREATE INDEX x_{observation}_numunitid ON {dataDb}.{observation} (numunitid);
  - CREATE INDEX x_{patient}_patienttypeid ON {dataDb}.{patient} (patienttypeid);
  - CREATE INDEX x_{problem}_probstatusid ON {dataDb}.{problem} (probstatusid);
  - CREATE INDEX x_{referral}_refservicetypeid ON {dataDb}.{referral} (refservicetypeid);
  # staffid
  - CREATE INDEX x_{consultation}_staffid ON {dataDb}.{consultation} (staffid);
  - CREATE INDEX x_{drugIssue}_staffid ON {dataDb}.{drugIssue} (staffid);
  - CREATE INDEX x_{observation}_staffid ON {dataDb}.{observation} (staffid);
  - CREATE INDEX x_{patient}_usualgpstaffid ON {dataDb}.{patient} (usualgpstaffid);
  - CREATE INDEX x_{problem}_lastrevstaffid ON {dataDb}.{problem} (lastrevstaffid);
  # other fields with lookups/used in definitions
  - CREATE INDEX x_{consultation}_conssourceid ON {dataDb}.{consultation} (conssourceid);
  - CREATE INDEX x_{observation}_obstypeid ON {dataDb}.{observation} (obstypeid);
  - CREATE INDEX x_{patient}_gender ON {dataDb}.{patient} (gender);
  - CREATE INDEX x_{patient}_acceptable ON {dataDb}.{patient} (acceptable);
  - CREATE INDEX x_{practice}_region ON {dataDb}.{practice} (region);
  - CREATE INDEX x_{problem}_parentprobrelid ON {dataDb}.{problem} (parentprobrelid);
  - CREATE INDEX x_{problem}_signid ON {dataDb}.{problem} (signid);
  - CREATE INDEX x_{referral}_refsourceorgid ON {dataDb}.{referral} (refsourceorgid);
  - CREATE INDEX x_{referral}_reftargetorgid ON {dataDb}.{referral} (reftargetorgid);
  - CREATE INDEX x_{referral}_refurgencyid ON {dataDb}.{referral} (refurgencyid);
  - CREATE INDEX x_{referral}_refmodeid ON {dataDb}.{referral} (refmodeid);
  - CREATE INDEX x_{staff}_jobcatid ON {dataDb}.{staff} (jobcatid);
  # Linkage data (index all fields except chess where there are too many)
  # chess
  - CREATE INDEX x_{chess}_patid ON {dataDb}.{chess} (patid);
  - CREATE INDEX x_{chess}_pracid ON {dataDb}.{chess} (pracid);
  - CREATE INDEX x_{chess}_n_chess_patid ON {dataDb}.{chess} (n_chess_patid);
  - CREATE INDEX x_{chess}_trustid ON {dataDb}.{chess} (trustid);
  - CREATE INDEX x_{chess}_weekofadmission_yearofadmission ON {dataDb}.{chess} (weekofadmission,yearofadmission);
  - CREATE INDEX x_{chess}_estimateddateonset ON {dataDb}.{chess} (estimateddateonset);
  - CREATE INDEX x_{chess}_infectionswabdate ON {dataDb}.{chess} (infectionswabdate);
  - CREATE INDEX x_{chess}_labtestdate ON {dataDb}.{chess} (labtestdate);
  - CREATE INDEX x_{chess}_covid19 ON {dataDb}.{chess} (covid19);
  - CREATE INDEX x_{chess}_admittedfrom ON {dataDb}.{chess} (admittedfrom);
  - CREATE INDEX x_{chess}_dateadmittedicu ON {dataDb}.{chess} (dateadmittedicu);
  - CREATE INDEX x_{chess}_dateleavingicu ON {dataDb}.{chess} (dateleavingicu);
  - CREATE INDEX x_{chess}_admissionflu ON {dataDb}.{chess} (admissionflu);
  - CREATE INDEX x_{chess}_admissioncovid19 ON {dataDb}.{chess} (admissioncovid19);
  - CREATE INDEX x_{chess}_ventilatedwhilstadmitteddays ON {dataDb}.{chess} (ventilatedwhilstadmitteddays);
  - CREATE INDEX x_{chess}_wasthepatientadmittedtoicu ON {dataDb}.{chess} (wasthepatientadmittedtoicu);
  - CREATE INDEX x_{chess}_daysecmo ON {dataDb}.{chess} (daysecmo);
  - CREATE INDEX x_{chess}_hospitaladmissiondate ON {dataDb}.{chess} (hospitaladmissiondate);
  - CREATE INDEX x_{chess}_admissionrsv ON {dataDb}.{chess} (admissionrsv);
  - CREATE INDEX x_{chess}_respiratorysupportnone ON {dataDb}.{chess} (respiratorysupportnone);
  - CREATE INDEX x_{chess}_oxygenviacannulaeormask ON {dataDb}.{chess} (oxygenviacannulaeormask);
  - CREATE INDEX x_{chess}_highflownasaloxygen ON {dataDb}.{chess} (highflownasaloxygen);
  - CREATE INDEX x_{chess}_noninvasivemechanicalventilation ON {dataDb}.{chess} (noninvasivemechanicalventilation);
  - CREATE INDEX x_{chess}_invasivemechanicalventilation ON {dataDb}.{chess} (invasivemechanicalventilation);
  - CREATE INDEX x_{chess}_respiratorysupportecmo ON {dataDb}.{chess} (respiratorysupportecmo);
  - CREATE INDEX x_{chess}_anticovid19treatment ON {dataDb}.{chess} (anticovid19treatment);
  - CREATE INDEX x_{chess}_chronicrespiratory ON {dataDb}.{chess} (chronicrespiratory);
  - CREATE INDEX x_{chess}_asthmarequiring ON {dataDb}.{chess} (asthmarequiring);
  - CREATE INDEX x_{chess}_chronicheart ON {dataDb}.{chess} (chronicheart);
  - CREATE INDEX x_{chess}_chronicrenal ON {dataDb}.{chess} (chronicrenal);
  - CREATE INDEX x_{chess}_chronicliver ON {dataDb}.{chess} (chronicliver);
  - CREATE INDEX x_{chess}_chronicneurological ON {dataDb}.{chess} (chronicneurological);
  - CREATE INDEX x_{chess}_isdiabetes ON {dataDb}.{chess} (isdiabetes);
  - CREATE INDEX x_{chess}_diabetestype ON {dataDb}.{chess} (diabetestype);
  - CREATE INDEX x_{chess}_immunosuppressiontreatment ON {dataDb}.{chess} (immunosuppressiontreatment);
  - CREATE INDEX x_{chess}_immunosuppressiondisease ON {dataDb}.{chess} (immunosuppressiondisease);
  - CREATE INDEX x_{chess}_other ON {dataDb}.{chess} (other);
  - CREATE INDEX x_{chess}_obesityclinical ON {dataDb}.{chess} (obesityclinical);
  - CREATE INDEX x_{chess}_obesitybmi ON {dataDb}.{chess} (obesitybmi);
  - CREATE INDEX x_{chess}_pregnancy ON {dataDb}.{chess} (pregnancy);
  - CREATE INDEX x_{chess}_prematurity ON {dataDb}.{chess} (prematurity);
  - CREATE INDEX x_{chess}_hypertension ON {dataDb}.{chess} (hypertension);
  - CREATE INDEX x_{chess}_travelin14days ON {dataDb}.{chess} (travelin14days);
  - CREATE INDEX x_{chess}_worksashealthcareworker ON {dataDb}.{chess} (worksashealthcareworker);
  - CREATE INDEX x_{chess}_contactwithconfirmedcovid19case ON {dataDb}.{chess} (contactwithconfirmedcovid19case);
  - CREATE INDEX x_{chess}_finaloutcome ON {dataDb}.{chess} (finaloutcome);
  - CREATE INDEX x_{chess}_finaloutcomedate ON {dataDb}.{chess} (finaloutcomedate);
  - CREATE INDEX x_{chess}_transferdestination ON {dataDb}.{chess} (transferdestination);
  - CREATE INDEX x_{chess}_causeofdeath ON {dataDb}.{chess} (causeofdeath);
  - CREATE INDEX x_{chess}_hospitaladmissionadmittedfrom ON {dataDb}.{chess} (hospitaladmissionadmittedfrom);
  - CREATE INDEX x_{chess}_mechanicalinvasiveventilationdur ON {dataDb}.{chess} (mechanicalinvasiveventilationdur);
  - CREATE INDEX x_{chess}_asymptomatictesting ON {dataDb}.{chess} (asymptomatictesting);
  - CREATE INDEX x_{chess}_patientstillonicu ON {dataDb}.{chess} (patientstillonicu);
  - CREATE INDEX x_{chess}_respiratorysupportunknown ON {dataDb}.{chess} (respiratorysupportunknown);
  - CREATE INDEX x_{chess}_priorhospitalattendance ON {dataDb}.{chess} (priorhospitalattendance);
  - CREATE INDEX x_{chess}_dateofpriorattendance ON {dataDb}.{chess} (dateofpriorattendance);
  - CREATE INDEX x_{chess}_admissionnotrelatedtorespiratory ON {dataDb}.{chess} (admissionnotrelatedtorespiratory);
  - CREATE INDEX x_{chess}_typeorplaceofwork ON {dataDb}.{chess} (typeorplaceofwork);
  - CREATE INDEX x_{chess}_treatmenttocilizumab ON {dataDb}.{chess} (treatmenttocilizumab);
  - CREATE INDEX x_{chess}_treatmentremdesivir ON {dataDb}.{chess} (treatmentremdesivir);
  - CREATE INDEX x_{chess}_treatmentother ON {dataDb}.{chess} (treatmentother);
  - CREATE INDEX x_{chess}_treatmentconvalescentplasma ON {dataDb}.{chess} (treatmentconvalescentplasma);
  # hesPatient
  - CREATE INDEX x_{hesPatient}_pracid ON {dataDb}.{hesPatient} (pracid);
  - CREATE INDEX x_{hesPatient}_gen_hesid ON {dataDb}.{hesPatient} (gen_hesid);
  - CREATE INDEX x_{hesPatient}_n_patid_hes ON {dataDb}.{hesPatient} (n_patid_hes);
  - CREATE INDEX x_{hesPatient}_gen_ethnicity ON {dataDb}.{hesPatient} (gen_ethnicity);
  - CREATE INDEX x_{hesPatient}_match_rank ON {dataDb}.{hesPatient} (match_rank);
  # hesHospital
  - CREATE INDEX x_{hesHospital}_patid ON {dataDb}.{hesHospital} (patid);
  - CREATE INDEX x_{hesHospital}_spno ON {dataDb}.{hesHospital} (spno);
  - CREATE INDEX x_{hesHospital}_admidate ON {dataDb}.{hesHospital} (admidate);
  - CREATE INDEX x_{hesHospital}_discharged ON {dataDb}.{hesHospital} (discharged);
  - CREATE INDEX x_{hesHospital}_admimeth ON {dataDb}.{hesHospital} (admimeth);
  - CREATE INDEX x_{hesHospital}_admisorc ON {dataDb}.{hesHospital} (admisorc);
  - CREATE INDEX x_{hesHospital}_disdest ON {dataDb}.{hesHospital} (disdest);
  - CREATE INDEX x_{hesHospital}_dismeth ON {dataDb}.{hesHospital} (dismeth);
  - CREATE INDEX x_{hesHospital}_duration ON {dataDb}.{hesHospital} (duration);
  - CREATE INDEX x_{hesHospital}_elecdate ON {dataDb}.{hesHospital} (elecdate);
  - CREATE INDEX x_{hesHospital}_elecdur ON {dataDb}.{hesHospital} (elecdur);
  # hesEpisodes
  - CREATE INDEX x_{hesEpisodes}_patid ON {dataDb}.{hesEpisodes} (patid);
  - CREATE INDEX x_{hesEpisodes}_spno ON {dataDb}.{hesEpisodes} (spno);
  - CREATE INDEX x_{hesEpisodes}_epikey ON {dataDb}.{hesEpisodes} (epikey);
  - CREATE INDEX x_{hesEpisodes}_admidate ON {dataDb}.{hesEpisodes} (admidate);
  - CREATE INDEX x_{hesEpisodes}_epistart ON {dataDb}.{hesEpisodes} (epistart);
  - CREATE INDEX x_{hesEpisodes}_epiend ON {dataDb}.{hesEpisodes} (epiend);
  - CREATE INDEX x_{hesEpisodes}_discharged ON {dataDb}.{hesEpisodes} (discharged);
  - CREATE INDEX x_{hesEpisodes}_eorder ON {dataDb}.{hesEpisodes} (eorder);
  - CREATE INDEX x_{hesEpisodes}_epidur ON {dataDb}.{hesEpisodes} (epidur);
  - CREATE INDEX x_{hesEpisodes}_epitype ON {dataDb}.{hesEpisodes} (epitype);
  - CREATE INDEX x_{hesEpisodes}_admimeth ON {dataDb}.{hesEpisodes} (admimeth);
  - CREATE INDEX x_{hesEpisodes}_admisorc ON {dataDb}.{hesEpisodes} (admisorc);
  - CREATE INDEX x_{hesEpisodes}_disdest ON {dataDb}.{hesEpisodes} (disdest);
  - CREATE INDEX x_{hesEpisodes}_dismeth ON {dataDb}.{hesEpisodes} (dismeth);
  - CREATE INDEX x_{hesEpisodes}_mainspef ON {dataDb}.{hesEpisodes} (mainspef);
  - CREATE INDEX x_{hesEpisodes}_tretspef ON {dataDb}.{hesEpisodes} (tretspef);
  - CREATE INDEX x_{hesEpisodes}_pconsult ON {dataDb}.{hesEpisodes} (pconsult);
  - CREATE INDEX x_{hesEpisodes}_intmanig ON {dataDb}.{hesEpisodes} (intmanig);
  - CREATE INDEX x_{hesEpisodes}_classpat ON {dataDb}.{hesEpisodes} (classpat);
  - CREATE INDEX x_{hesEpisodes}_firstreg ON {dataDb}.{hesEpisodes} (firstreg);
  - CREATE INDEX x_{hesEpisodes}_ethnos ON {dataDb}.{hesEpisodes} (ethnos);
  # hesDiagnosisEpi
  - CREATE INDEX x_{hesDiagnosisEpi}_patid ON {dataDb}.{hesDiagnosisEpi} (patid);
  - CREATE INDEX x_{hesDiagnosisEpi}_spno ON {dataDb}.{hesDiagnosisEpi} (spno);
  - CREATE INDEX x_{hesDiagnosisEpi}_epikey ON {dataDb}.{hesDiagnosisEpi} (epikey);
  - CREATE INDEX x_{hesDiagnosisEpi}_epistart ON {dataDb}.{hesDiagnosisEpi} (epistart);
  - CREATE INDEX x_{hesDiagnosisEpi}_epiend ON {dataDb}.{hesDiagnosisEpi} (epiend);
  - CREATE INDEX x_{hesDiagnosisEpi}_ICD ON {dataDb}.{hesDiagnosisEpi} (ICD);
  - CREATE INDEX x_{hesDiagnosisEpi}_ICDx ON {dataDb}.{hesDiagnosisEpi} (ICDx);
  - CREATE INDEX x_{hesDiagnosisEpi}_d_order ON {dataDb}.{hesDiagnosisEpi} (d_order);
  # hesDiagnosisHosp
  - CREATE INDEX x_{hesDiagnosisHosp}_patid ON {dataDb}.{hesDiagnosisHosp} (patid);
  - CREATE INDEX x_{hesDiagnosisHosp}_spno ON {dataDb}.{hesDiagnosisHosp} (spno);
  - CREATE INDEX x_{hesDiagnosisHosp}_admidate ON {dataDb}.{hesDiagnosisHosp} (admidate);
  - CREATE INDEX x_{hesDiagnosisHosp}_discharged ON {dataDb}.{hesDiagnosisHosp} (discharged);
  - CREATE INDEX x_{hesDiagnosisHosp}_ICD ON {dataDb}.{hesDiagnosisHosp} (ICD);
  - CREATE INDEX x_{hesDiagnosisHosp}_ICDx ON {dataDb}.{hesDiagnosisHosp} (ICDx);
  # hesPrimaryDiagHosp
  - CREATE INDEX x_{hesPrimaryDiagHosp}_patid ON {dataDb}.{hesPrimaryDiagHosp} (patid);
  - CREATE INDEX x_{hesPrimaryDiagHosp}_spno ON {dataDb}.{hesPrimaryDiagHosp} (spno);
  - CREATE INDEX x_{hesPrimaryDiagHosp}_admidate ON {dataDb}.{hesPrimaryDiagHosp} (admidate);
  - CREATE INDEX x_{hesPrimaryDiagHosp}_discharged ON {dataDb}.{hesPrimaryDiagHosp} (discharged);
  - CREATE INDEX x_{hesPrimaryDiagHosp}_ICD_PRIMARY ON {dataDb}.{hesPrimaryDiagHosp} (ICD_PRIMARY);
  - CREATE INDEX x_{hesPrimaryDiagHosp}_ICDx ON {dataDb}.{hesPrimaryDiagHosp} (ICDx);
  # hesProceduresEpi
  - CREATE INDEX x_{hesProceduresEpi}_patid ON {dataDb}.{hesProceduresEpi} (patid);
  - CREATE INDEX x_{hesProceduresEpi}_spno ON {dataDb}.{hesProceduresEpi} (spno);
  - CREATE INDEX x_{hesProceduresEpi}_epikey ON {dataDb}.{hesProceduresEpi} (epikey);
  - CREATE INDEX x_{hesProceduresEpi}_admidate ON {dataDb}.{hesProceduresEpi} (admidate);
  - CREATE INDEX x_{hesProceduresEpi}_epistart ON {dataDb}.{hesProceduresEpi} (epistart);
  - CREATE INDEX x_{hesProceduresEpi}_epiend ON {dataDb}.{hesProceduresEpi} (epiend);
  - CREATE INDEX x_{hesProceduresEpi}_discharged ON {dataDb}.{hesProceduresEpi} (discharged);
  - CREATE INDEX x_{hesProceduresEpi}_OPCS ON {dataDb}.{hesProceduresEpi} (OPCS);
  - CREATE INDEX x_{hesProceduresEpi}_evdate ON {dataDb}.{hesProceduresEpi} (evdate);
  - CREATE INDEX x_{hesProceduresEpi}_p_order ON {dataDb}.{hesProceduresEpi} (p_order);
  # hesAcp
  - CREATE INDEX x_{hesAcp}_patid ON {dataDb}.{hesAcp} (patid);
  - CREATE INDEX x_{hesAcp}_spno ON {dataDb}.{hesAcp} (spno);
  - CREATE INDEX x_{hesAcp}_epikey ON {dataDb}.{hesAcp} (epikey);
  - CREATE INDEX x_{hesAcp}_epistart ON {dataDb}.{hesAcp} (epistart);
  - CREATE INDEX x_{hesAcp}_epiend ON {dataDb}.{hesAcp} (epiend);
  - CREATE INDEX x_{hesAcp}_eorder ON {dataDb}.{hesAcp} (eorder);
  - CREATE INDEX x_{hesAcp}_epidur ON {dataDb}.{hesAcp} (epidur);
  - CREATE INDEX x_{hesAcp}_numacp ON {dataDb}.{hesAcp} (numacp);
  - CREATE INDEX x_{hesAcp}_acpn ON {dataDb}.{hesAcp} (acpn);
  - CREATE INDEX x_{hesAcp}_acpstar ON {dataDb}.{hesAcp} (acpstar);
  - CREATE INDEX x_{hesAcp}_acpend ON {dataDb}.{hesAcp} (acpend);
  - CREATE INDEX x_{hesAcp}_acpdur ON {dataDb}.{hesAcp} (acpdur);
  - CREATE INDEX x_{hesAcp}_intdays ON {dataDb}.{hesAcp} (intdays);
  - CREATE INDEX x_{hesAcp}_depdays ON {dataDb}.{hesAcp} (depdays);
  - CREATE INDEX x_{hesAcp}_acploc ON {dataDb}.{hesAcp} (acploc);
  - CREATE INDEX x_{hesAcp}_acpsour ON {dataDb}.{hesAcp} (acpsour);
  - CREATE INDEX x_{hesAcp}_acpdisp ON {dataDb}.{hesAcp} (acpdisp);
  - CREATE INDEX x_{hesAcp}_acpout ON {dataDb}.{hesAcp} (acpout);
  - CREATE INDEX x_{hesAcp}_acpplan ON {dataDb}.{hesAcp} (acpplan);
  - CREATE INDEX x_{hesAcp}_acpspef ON {dataDb}.{hesAcp} (acpspef);
  - CREATE INDEX x_{hesAcp}_orgsup ON {dataDb}.{hesAcp} (orgsup);
  # hesCcare
  - CREATE INDEX x_{hesCcare}_patid ON {dataDb}.{hesCcare} (patid);
  - CREATE INDEX x_{hesCcare}_spno ON {dataDb}.{hesCcare} (spno);
  - CREATE INDEX x_{hesCcare}_epikey ON {dataDb}.{hesCcare} (epikey);
  - CREATE INDEX x_{hesCcare}_admidate ON {dataDb}.{hesCcare} (admidate);
  - CREATE INDEX x_{hesCcare}_discharged ON {dataDb}.{hesCcare} (discharged);
  - CREATE INDEX x_{hesCcare}_epistart ON {dataDb}.{hesCcare} (epistart);
  - CREATE INDEX x_{hesCcare}_epiend ON {dataDb}.{hesCcare} (epiend);
  - CREATE INDEX x_{hesCcare}_eorder ON {dataDb}.{hesCcare} (eorder);
  - CREATE INDEX x_{hesCcare}_ccstartdate ON {dataDb}.{hesCcare} (ccstartdate);
  - CREATE INDEX x_{hesCcare}_ccstarttime ON {dataDb}.{hesCcare} (ccstarttime);
  - CREATE INDEX x_{hesCcare}_ccdisrdydate ON {dataDb}.{hesCcare} (ccdisrdydate);
  - CREATE INDEX x_{hesCcare}_ccdisrdytime ON {dataDb}.{hesCcare} (ccdisrdytime);
  - CREATE INDEX x_{hesCcare}_ccdisdate ON {dataDb}.{hesCcare} (ccdisdate);
  - CREATE INDEX x_{hesCcare}_ccdistime ON {dataDb}.{hesCcare} (ccdistime);
  - CREATE INDEX x_{hesCcare}_ccadmitype ON {dataDb}.{hesCcare} (ccadmitype);
  - CREATE INDEX x_{hesCcare}_ccadmisorc ON {dataDb}.{hesCcare} (ccadmisorc);
  - CREATE INDEX x_{hesCcare}_ccsorcloc ON {dataDb}.{hesCcare} (ccsorcloc);
  - CREATE INDEX x_{hesCcare}_ccdisstat ON {dataDb}.{hesCcare} (ccdisstat);
  - CREATE INDEX x_{hesCcare}_ccdisdest ON {dataDb}.{hesCcare} (ccdisdest);
  - CREATE INDEX x_{hesCcare}_ccdisloc ON {dataDb}.{hesCcare} (ccdisloc);
  - CREATE INDEX x_{hesCcare}_cclev2days ON {dataDb}.{hesCcare} (cclev2days);
  - CREATE INDEX x_{hesCcare}_cclev3days ON {dataDb}.{hesCcare} (cclev3days);
  - CREATE INDEX x_{hesCcare}_bcardsupdays ON {dataDb}.{hesCcare} (bcardsupdays);
  - CREATE INDEX x_{hesCcare}_acardsupdays ON {dataDb}.{hesCcare} (acardsupdays);
  - CREATE INDEX x_{hesCcare}_bressupdays ON {dataDb}.{hesCcare} (bressupdays);
  - CREATE INDEX x_{hesCcare}_aressupdays ON {dataDb}.{hesCcare} (aressupdays);
  - CREATE INDEX x_{hesCcare}_gisupdays ON {dataDb}.{hesCcare} (gisupdays);
  - CREATE INDEX x_{hesCcare}_liversupdays ON {dataDb}.{hesCcare} (liversupdays);
  - CREATE INDEX x_{hesCcare}_neurosupdays ON {dataDb}.{hesCcare} (neurosupdays);
  - CREATE INDEX x_{hesCcare}_rensupdays ON {dataDb}.{hesCcare} (rensupdays);
  - CREATE INDEX x_{hesCcare}_dermsupdays ON {dataDb}.{hesCcare} (dermsupdays);
  - CREATE INDEX x_{hesCcare}_orgsupmax ON {dataDb}.{hesCcare} (orgsupmax);
  - CREATE INDEX x_{hesCcare}_ccunitfun ON {dataDb}.{hesCcare} (ccunitfun);
  - CREATE INDEX x_{hesCcare}_unitbedconfig ON {dataDb}.{hesCcare} (unitbedconfig);
  - CREATE INDEX x_{hesCcare}_bestmatch ON {dataDb}.{hesCcare} (bestmatch);
  - CREATE INDEX x_{hesCcare}_ccapcrel ON {dataDb}.{hesCcare} (ccapcrel);
  # patientImd2015
  - CREATE INDEX x_{patientImd2015}_pracid ON {dataDb}.{patientImd2015} (pracid);
  - CREATE INDEX x_{patientImd2015}_imd2015_10 ON {dataDb}.{patientImd2015} (imd2015_10);
  # practiceImd
  - CREATE INDEX x_{practiceImd}_country ON {dataDb}.{practiceImd} (country);
  - CREATE INDEX x_{practiceImd}_e2015_imd_10 ON {dataDb}.{practiceImd} (e2015_imd_10);
  - CREATE INDEX x_{practiceImd}_ni2017_imd_10 ON {dataDb}.{practiceImd} (ni2017_imd_10);
  - CREATE INDEX x_{practiceImd}_s2016_imd_10 ON {dataDb}.{practiceImd} (s2016_imd_10);
  - CREATE INDEX x_{practiceImd}_w2014_imd_10 ON {dataDb}.{practiceImd} (w2014_imd_10);
  # onsDeath
  - CREATE INDEX x_{onsDeath}_pracid ON {dataDb}.{onsDeath} (pracid);
  - CREATE INDEX x_{onsDeath}_gen_death_id ON {dataDb}.{onsDeath} (gen_death_id);
  - CREATE INDEX x_{onsDeath}_n_patid_death ON {dataDb}.{onsDeath} (n_patid_death);
  - CREATE INDEX x_{onsDeath}_match_rank ON {dataDb}.{onsDeath} (match_rank);
  - CREATE INDEX x_{onsDeath}_dor ON {dataDb}.{onsDeath} (dor);
  - CREATE INDEX x_{onsDeath}_dod ON {dataDb}.{onsDeath} (dod);
  - CREATE INDEX x_{onsDeath}_dod_partial ON {dataDb}.{onsDeath} (dod_partial);
  - CREATE INDEX x_{onsDeath}_nhs_indicator ON {dataDb}.{onsDeath} (nhs_indicator);
  - CREATE INDEX x_{onsDeath}_pod_category ON {dataDb}.{onsDeath} (pod_category);
  - CREATE INDEX x_{onsDeath}_cause ON {dataDb}.{onsDeath} (cause);
  - CREATE INDEX x_{onsDeath}_cause1 ON {dataDb}.{onsDeath} (cause1);
  - CREATE INDEX x_{onsDeath}_cause2 ON {dataDb}.{onsDeath} (cause2);
  - CREATE INDEX x_{onsDeath}_cause3 ON {dataDb}.{onsDeath} (cause3);
  - CREATE INDEX x_{onsDeath}_cause4 ON {dataDb}.{onsDeath} (cause4);
  - CREATE INDEX x_{onsDeath}_cause5 ON {dataDb}.{onsDeath} (cause5);
  - CREATE INDEX x_{onsDeath}_cause6 ON {dataDb}.{onsDeath} (cause6);
  - CREATE INDEX x_{onsDeath}_cause7 ON {dataDb}.{onsDeath} (cause7);
  - CREATE INDEX x_{onsDeath}_cause8 ON {dataDb}.{onsDeath} (cause8);
  - CREATE INDEX x_{onsDeath}_cause9 ON {dataDb}.{onsDeath} (cause9);
  - CREATE INDEX x_{onsDeath}_cause10 ON {dataDb}.{onsDeath} (cause10);
  - CREATE INDEX x_{onsDeath}_cause11 ON {dataDb}.{onsDeath} (cause11);
  - CREATE INDEX x_{onsDeath}_cause12 ON {dataDb}.{onsDeath} (cause12);
  - CREATE INDEX x_{onsDeath}_cause13 ON {dataDb}.{onsDeath} (cause13);
  - CREATE INDEX x_{onsDeath}_cause14 ON {dataDb}.{onsDeath} (cause14);
  - CREATE INDEX x_{onsDeath}_cause15 ON {dataDb}.{onsDeath} (cause15);
  # sgss
  - CREATE INDEX x_{sgss}_patid ON {dataDb}.{sgss} (patid);
  - CREATE INDEX x_{sgss}_pracid ON {dataDb}.{sgss} (pracid);
  - CREATE INDEX x_{sgss}_n_patid_spec ON {dataDb}.{sgss} (n_patid_spec);
  - CREATE INDEX x_{sgss}_pseudo_specimen_id ON {dataDb}.{sgss} (pseudo_specimen_id);
  - CREATE INDEX x_{sgss}_organism_species_name ON {dataDb}.{sgss} (organism_species_name);
  - CREATE INDEX x_{sgss}_lab_report_date ON {dataDb}.{sgss} (lab_report_date);
  - CREATE INDEX x_{sgss}_age_in_years ON {dataDb}.{sgss} (age_in_years);
  - CREATE INDEX x_{sgss}_reporting_lab_id ON {dataDb}.{sgss} (reporting_lab_id);
  - CREATE INDEX x_{sgss}_specimen_date ON {dataDb}.{sgss} (specimen_date);
  - CREATE INDEX x_{sgss}_care_home ON {dataDb}.{sgss} (care_home);
